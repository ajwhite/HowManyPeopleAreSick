{"version":3,"sources":["images/sites/bing.png","images/sites/informationisbeautiful.png","images/sites/ncov2019.png","images/sites/jhu.png","images/background.png","data/useHttpState.js","data/useHistoricalData.js","Stats/Stat.jsx","Stats/Stats.jsx","data/sites.js","Sites/Site.jsx","Sites/Sites.jsx","Map.jsx","ui/Colors.js","DateScrubber/Marker.jsx","DateScrubber/DateScrubber.jsx","DateScrubber/useDateRange.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useHttpState","useState","loading","data","error","state","setState","setLoading","s","setData","setError","loadEndpoint","endpoint","fetch","then","resp","text","useCombinedHistoricalData","httpState","useEffect","Promise","all","csvs","map","csv","split","row","header","rows","dates","province","country","lat","lng","trim","key","parseFloat","d","i","date","value","parseInt","filter","undefined","confirmed","recovered","deaths","confirmedRecord","recoveredRecord","find","r","deathsRecord","confirmedData","recoveredData","deathsData","mergeData","catch","colors","red","green","blue","Stat","number","size","color","label","Container","toLocaleString","Byline","styled","div","Number","h1","props","span","Stats","total","reduce","Math","max","Row","style","marginRight","jhu","bing","informationisbeautiful","nCoV2019","a","image","CovidMap","width","height","Map","center","zoom","zoomControl","TileLayer","attribution","url","Cases","index","Fragment","datum","cases","isNaN","radius","toRadius","Circle","fillColor","fillOpacity","Colors","Marker","dateRange","indexOf","position","length","Label","DateScrubber","from","to","onDateChanged","setDateRange","range","f","moment","t","cursor","isSameOrBefore","push","clone","format","add","useDateRange","tickDate","Tick","adjacent","current","DateScrubberContainer","MapContainer","Content","App","bg","combinedData","sampleData","toDate","subtract","fromDate","tickRate","setDate","isSameOrAfter","interval","setTimeout","clearTimeout","useTickingDate","dataByDay","countries","useDataForDate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,gNCEpC,SAASC,IAAgB,IAAD,EACHC,mBAAS,CACjCC,SAAS,EACTC,KAAM,KACNC,MAAO,OAJoB,mBACtBC,EADsB,KACfC,EADe,KAO7B,OAAO,eACFD,EADL,CAEEE,WAFF,WAGID,GAAS,SAAAE,GAAC,sBAASA,EAAT,CAAYN,SAAS,QAEjCO,QALF,SAKUN,GACNG,EAAS,CAACH,OAAMD,SAAS,EAAOE,MAAO,QAEzCM,SARF,SAQWN,GACPE,GAAS,SAAAE,GAAC,sBAASA,EAAT,CAAYN,SAAS,EAAOE,gB,oBCV5C,SAASO,EAAaC,GACpB,OAAOC,YAAM,iHAAD,OAAkHD,IAC3HE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAyFhB,SAASC,IACd,IAAMC,EAAYlB,IASlB,OAPAmB,qBAAU,WACRD,EAAUX,aA/DLa,QAAQC,IAAI,CACjBV,EArCuB,4CAsCvBA,EArCuB,4CAsCvBA,EArCoB,2CAsCnBG,MAAK,SAAAQ,GAAS,IAAD,EACyBA,EAAKC,KAAI,SAAAC,GAC9C,IADqD,EACrCA,EAAIC,MAAM,MACQF,KAAI,SAAAG,GAAG,OAAIA,EAAID,MAAM,QAFF,iBAE9CE,EAF8C,KAEnCC,EAFmC,WAItCC,EAJsC,YAI7BF,GAJ6B,SAwBrD,OAlBaC,EAAKL,KAAI,SAAAG,GAAQ,IAAD,cACkBA,GAAxCI,EADsB,KACZC,EADY,KACHC,EADG,KACEC,EADF,KACU9B,EADV,WAK3B,OAHA4B,EAAUA,GAAWA,EAAQG,OAC7BJ,EAAWA,GAAYA,EAASI,OAEzB,CACLC,IAAI,GAAD,OAAKJ,EAAL,YAAgBD,GACnBC,UACAD,WACAE,IAAKI,WAAWJ,GAChBC,IAAKG,WAAWH,GAChB9B,KAAMA,EAAKoB,KAAI,SAACc,EAAGC,GAAJ,MAAW,CACxBC,KAAMV,EAAMS,IAAMT,EAAMS,GAAGJ,OAC3BM,MAAOC,SAASJ,OACdK,QAAO,SAAAL,GAAC,QAAMA,EAAEE,YAErBG,QAAO,SAAAL,GAAC,YAAkBM,IAAdN,EAAEN,cAvBL,mBA2Bd,MAAO,CAACa,UA3BM,KA2BKC,UA3BL,KA2BgBC,OA3BhB,SA6DXhC,MAAK,gBAAE8B,EAAF,EAAEA,UAAWC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,OAAxB,OAAoC5B,EAAUT,QA9B1D,SAAoBmC,EAAWC,EAAWC,GACxC,OAAOF,EAAUrB,KAAI,SAAAwB,GACnB,IAAMC,EAAkBH,EAAUI,MAAK,SAAAC,GAAC,OAAIA,EAAEf,MAAQY,EAAgBZ,OAChEgB,EAAeL,EAAOG,MAAK,SAAAZ,GAAC,OAAIA,EAAEF,MAAQY,EAAgBZ,OAEhE,OAAO,eACFY,EADL,CAEE5C,KAAM4C,EAAgB5C,KAAKoB,KAAI,SAAA6B,GAC7B,IAAMR,EAAYQ,EAAcZ,MAC1Ba,EAAgBL,GAAmBA,EAAgB7C,KAAK8C,MAAK,SAAAZ,GAAC,OAAIA,EAAEE,OAASa,EAAcb,QAC3Fe,EAAaH,GAAgBA,EAAahD,KAAK8C,MAAK,SAAAZ,GAAC,OAAIA,EAAEE,OAASa,EAAcb,QAClFM,EAAYQ,GAAiBA,EAAcb,MAC3CM,EAASQ,GAAcA,EAAWd,MACxC,MAAO,CACLD,KAAMa,EAAcb,KACpBK,YACAC,YACAC,kBAawDS,CAAUX,EAAWC,EAAWC,OAC3FU,OAAM,SAAApD,GAAK,OAAIc,EAAUR,SAASN,QACpC,IAEI,CACLF,QAASgB,EAAUhB,QACnBE,MAAOc,EAAUd,MACjBD,KAAMe,EAAUf,M,4WC7GpB,IAAMsD,EAAS,CACbC,IAAK,UACLC,MAAO,UACPC,KAAM,WAGD,SAASC,EAAT,GAAgE,IAAhDC,EAA+C,EAA/CA,OAA+C,IAAvCC,YAAuC,MAAhC,QAAgC,MAAvBC,aAAuB,MAAf,MAAe,EAARC,EAAQ,EAARA,MAC5D,OACE,kBAACC,EAAD,KACE,kBAAC,EAAD,CAAQH,KAAMA,EAAMC,MAAOA,GAAQF,EAAOK,kBAC1C,kBAACC,EAAD,CAAQL,KAAMA,GAAOE,IAK3B,IAAMC,EAAYG,IAAOC,IAAV,KAITC,EAASF,IAAOG,GAAV,KACD,SAAAC,GAAK,OAAIhB,EAAOgB,EAAMT,UAClB,SAAAS,GAAK,MAAmB,UAAfA,EAAMV,KAAmB,OAAS,UAKpDK,EAASC,IAAOK,KAAV,KAEG,SAAAD,GAAK,MAAmB,UAAfA,EAAMV,KAAmB,OAAS,U,iHC3BnD,SAASY,EAAT,GAAyB,IAARxE,EAAO,EAAPA,KACtB,IAAKA,EAAM,OAAO,KAElB,IAAMyE,EAAQzE,EAAK0E,QAAO,SAACD,EAAO7C,GAAR,MAAqB,CAC7Ca,UAAWgC,EAAMhC,UAAYb,EAAQ5B,KAAKyC,UAC1CC,UAAW+B,EAAM/B,UAAYd,EAAQ5B,KAAK0C,UAC1CC,OAAQ8B,EAAM9B,OAASf,EAAQ5B,KAAK2C,UAClC,CAACF,UAAW,EAAGC,UAAW,EAAGC,OAAQ,IAEzC,OACE,oCACE,kBAACe,EAAD,CACEC,OAAQgB,KAAKC,IAAI,EAAGH,EAAMhC,WAC1BqB,MAAM,kBACND,MAAM,QAER,kBAACgB,EAAD,KACE,yBAAKC,MAAO,CAACC,YAAa,KACxB,kBAACrB,EAAD,CACEC,OAAQgB,KAAKC,IAAI,EAAGH,EAAM/B,WAC1BoB,MAAM,YACND,MAAM,QACND,KAAK,WAGT,kBAACF,EAAD,CACEC,OAAQgB,KAAKC,IAAI,EAAGH,EAAM9B,QAC1BmB,MAAM,SACND,MAAM,OACND,KAAK,YAOf,IAAMiB,EAAMX,IAAOC,IAAV,K,kEC/BEa,EASAC,IAKAC,IAKAC,I,gcChBMjB,IAAOkB,EAAV,KAOGlB,IAAOK,KAAV,KAKGL,IAAOC,IAAV,KACY,SAAAG,GAAK,OAAIA,EAAMe,S,iMCF7BnB,IAAOC,IAAV,KAAT,I,wBCpBO,SAASmB,EAAT,GAA4B,IAARtF,EAAO,EAAPA,KAezB,OACE,yBAAK8E,MAAO,CAACS,MAAO,OAAQC,OAAQ,SAClC,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,GAAI,GAAIC,KAAM,EAAGC,aAAa,GAC1C,kBAACC,EAAA,EAAD,CAAWC,YAAY,yEAA2EC,IAAI,gFACrG/F,GAAQ,kBAACgG,EAAD,CAAOhG,KAAMA,MAwB9B,SAASgG,EAAT,GAAgC,IAAfhG,EAAc,EAAdA,KAAc,EAARiG,MACrB,OACE,kBAAC,IAAMC,SAAP,KACGlG,EAAKoB,KAAI,SAAA+E,GAER,IAAMC,EAAQD,EAAMnG,KAAKyC,UACzB,IAAK2D,EACH,OAAO,KAET,GAAIC,MAAMF,EAAMtE,MAAQwE,MAAMF,EAAMrE,MAAQuE,MAAMD,IAAwB,WAAdD,EAAMrE,IAEhE,OAAO,KAGT,IAAMwE,EAhCG,SAAAF,GACf,OAAIA,EAAQ,GACH,IACEA,EAAQ,GACV,IACEA,EAAQ,GACV,IACEA,EAAQ,IACV,IACEA,EAAQ,IACV,IACEA,EAAQ,IACV,IAEA,IAkBYG,CAASH,GAElBvE,EAAMwE,MAAMF,EAAMtE,KAAO,EAAIsE,EAAMtE,IACnCC,EAAMuE,MAAMF,EAAMrE,KAAO,EAAIqE,EAAMrE,IAEzC,OACE,kBAAC0E,EAAA,EAAD,CACExE,IAAG,UAAKmE,EAAMvE,QAAX,YAAsBuE,EAAMxE,SAA5B,YAAwCyE,GAC3CV,OAAQ,CAAC7D,EAAKC,GACd2E,UAAU,MACV5C,MAAM,SACN6C,YAAa,GACbJ,OAAQA,QCxEb,IAAMK,EACJ,UADIA,EAIL,U,4eCAD,SAASC,EAAT,GAAqC,IAAnBxE,EAAkB,EAAlBA,KAAMyE,EAAY,EAAZA,UACvBZ,EAAQY,EAAUC,QAAQ1E,GAEhC,OACE,kBAAC,EAAD,CAAW2E,SAAoB,IAAVd,EAAc,EAAIA,EAAQY,EAAUG,QACvD,kBAACC,EAAD,KAAQ7E,IAMd,IAAM2B,EAAYG,IAAOC,IAAV,KAKL,SAAAG,GAAK,OAAsB,IAAjBA,EAAMyC,YAQpBE,EAAQ/C,IAAOK,KAAV,IAEAoC,GAGEzC,IAAOC,IAAV,IACYwC,G,6ZC5Bf,SAASO,GAAT,GAKH,IAJFC,EAIC,EAJDA,KACAC,EAGC,EAHDA,GACAhF,EAEC,EAFDA,KAGMyE,GADL,EADDQ,cCPK,SAAuBF,EAAMC,GAAK,IAAD,EACJtH,mBAAS,IADL,mBAC/B+G,EAD+B,KACpBS,EADoB,KAiBtC,OAdAtG,qBAAU,WAMR,IALA,IAAMuG,EAAQ,GACRC,EAAIC,IAAON,GACXO,EAAID,IAAOL,GACbO,EAASH,EAENG,EAAOC,eAAeF,IAC3BH,EAAMM,KAAKF,EAAOG,QAAQC,OAAO,WACjCJ,EAAOK,IAAI,EAAG,OAGhBV,EAAaC,KACZ,CAACJ,EAAMC,IAEHP,EDRWoB,CAAad,EAAMC,IAErC,OACE,kBAAC,GAAD,KACGP,EAAUzF,KAAI,SAAA8G,GAAQ,OACrB,kBAACC,GAAD,CACEnG,IAAKkG,EACLE,SAAWF,EAAW,IAAO9F,GAAS8F,EAAW,IAAO9F,EACxDiG,QAASH,IAAa9F,OAG1B,kBAACwE,EAAD,CACExE,KAAMA,EACNyE,UAAWA,KAMnB,IAAM9C,GAAYG,IAAOC,IAAV,MAUTgE,GAAOjE,IAAOC,IAAV,IACYwC,GAKlB,SAAArC,GAAK,OAAIA,EAAM+D,SAAN,qDAEW1B,EAFX,WAIT,SAAArC,GAAK,OAAIA,EAAM8D,UAAN,6B,+6BE8Bb,IAAMrE,GAAYG,IAAOC,IAAV,MAKTmE,GAAwBpE,IAAOC,IAAV,MAOrBoE,GAAerE,IAAOC,IAAV,MASZqE,GAAUtE,IAAOC,IAAV,MAwBEsE,IAbJvE,IAAOC,IAAV,KAGkBuE,MArE1B,WACE,IAAMC,EAAe7H,IACf8H,EAAaD,EAAa3I,KAAO2I,EAAa3I,KAAK,GAAGA,KAAO,KAE7D6I,EAASD,EAAaA,EAAWA,EAAW5B,OAAS,GAAG5E,KAAOqF,MAASqB,SAAS,EAAG,OAAOf,OAAO,UAClGgB,EAAWH,EAAaA,EAAW,GAAGxG,KAAOyG,EAC7CzG,EAhCR,SAAyB+E,EAAMC,GAAqB,IAAjB4B,EAAgB,uDAAL,IAAK,EACzBlJ,mBAASqH,GADgB,mBAC1C/E,EAD0C,KACpC6G,EADoC,KAuBjD,OApBAjI,qBAAU,WACR,IAAMwG,EAAIC,IAAON,GACXO,EAAID,IAAOL,GACXlF,EAAIuF,IAAOrF,GAEjB,IAAIoF,EAAE0B,cAAcxB,EAAG,SAAUxF,EAAE4F,QAAQoB,cAAcxB,EAAG,OAA5D,CAIA,IAAMyB,EAAWC,YAAW,WAC1BH,GAAQ,SAAA/G,GAAC,OAAIuF,IAAOvF,GAAG4F,QAAQE,IAAI,EAAG,KAAKD,OAAO,eACjDiB,GAEH,OAAO,kBAAMK,aAAaF,OACzB,CAAChC,EAAMC,EAAIhF,IAEdpB,qBAAU,WACRiI,EAAQ9B,KACP,CAACA,EAAMC,IAEHhF,EASMkH,CACXP,EACAF,EACA,KAEIU,EA7CR,SAAwBC,EAAWpH,GAEjC,OADAoH,EAAYA,GAAa,IACRpI,KAAI,SAAAQ,GAAO,sBACvBA,EADuB,CAE1B5B,KAAM4B,EAAQ5B,KAAK8C,MAAK,SAAAZ,GAAC,OAAIA,EAAEE,OAASA,MAASR,EAAQ5B,KAAK4B,EAAQ5B,KAAKgH,OAAS,QAyCpEyC,CAAed,EAAa3I,KAAMoC,GAEpD,OACE,kBAAC,GAAD,KACE,kBAACmG,GAAD,KACE,kBAACjD,EAAD,CAAUtF,KAAMuJ,KAElB,kBAACf,GAAD,KACE,kBAAChE,EAAD,CAAOxE,KAAMuJ,IAEb,kBAACjB,GAAD,KACE,kBAACpB,GAAD,CACEC,KAAM4B,EACN3B,GAAIyB,EACJzG,KAAMA,EACNiF,cAAe,oBC7DPqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1J,MAAK,SAAA2J,GACJA,EAAaC,gBAEdlH,OAAM,SAAApD,GACLuK,QAAQvK,MAAMA,EAAMwK,c","file":"static/js/main.4b3e149a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bing.c60e4f07.png\";","module.exports = __webpack_public_path__ + \"static/media/informationisbeautiful.cb419ba7.png\";","module.exports = __webpack_public_path__ + \"static/media/ncov2019.e1ff104e.png\";","module.exports = __webpack_public_path__ + \"static/media/jhu.60810e2b.png\";","module.exports = __webpack_public_path__ + \"static/media/background.29d5df28.png\";","import {useState} from 'react';\n\nexport function useHttpState() {\n  const [state, setState] = useState({\n    loading: false,\n    data: null,\n    error: null\n  });\n\n  return {\n    ...state,\n    setLoading() {\n      setState(s => ({...s, loading: true}));\n    },\n    setData(data) {\n      setState({data, loading: false, error: null});\n    },\n    setError(error) {\n      setState(s => ({...s, loading: false, error}));\n    }\n  };\n}\n","import {fetch} from 'whatwg-fetch';\nimport {useHttpState} from './useHttpState';\nimport { useEffect } from 'react';\n\nconst CONFIRMED_ENDPOINT = 'time_series_covid19_confirmed_global.csv';\nconst RECOVERED_ENDPOINT = 'time_series_covid19_recovered_global.csv';\nconst DEATHS_ENDPOINT = 'time_series_covid19_deaths_global.csv';\n\nfunction loadEndpoint(endpoint) {\n  return fetch(`https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/${endpoint}`)\n    .then(resp => resp.text());\n}\n\nfunction loadHistoricalData () {\n  return loadEndpoint('time_series_19-covid-Confirmed.csv')\n    .then(csv => {\n      const rows = csv.split('\\n');\n      const data = rows.map(row => row.split(','));\n      return parseData(data);\n    })\n}\n\nfunction parseData (rawData) {\n  const [header, ...rows] = rawData;\n\n  const data = rows.map(columns => {\n    const [province, country, lat, lng, ...confirmedCases] = columns;\n    return {\n      country,\n      province,\n      lat: parseFloat(lat),\n      lng: parseFloat(lng),\n      confirmedCases: confirmedCases.map(count => parseInt(count))\n    };\n  });\n\n  return data;\n}\n\nfunction loadData() {\n  return Promise.all([\n    loadEndpoint(CONFIRMED_ENDPOINT),\n    loadEndpoint(RECOVERED_ENDPOINT),\n    loadEndpoint(DEATHS_ENDPOINT)\n  ]).then(csvs => {\n    const [confirmed, recovered, deaths] = csvs.map(csv => {\n      const csvRows = csv.split('\\n');\n      const [header, ...rows] = csvRows.map(row => row.split(','));\n\n      const [,,,, ...dates] = header;\n\n      const data = rows.map(row => {\n        let [province, country, lat, lng, ...data] = row;\n        country = country && country.trim();\n        province = province && province.trim();\n\n        return {\n          key: `${country}/${province}`,\n          country,\n          province,\n          lat: parseFloat(lat),\n          lng: parseFloat(lng),\n          data: data.map((d, i) => ({\n            date: dates[i] && dates[i].trim(),\n            value: parseInt(d)\n          })).filter(d => !!d.date)\n        };\n      }).filter(d => d.country !== undefined);\n\n      return data;\n    })\n    return {confirmed, recovered, deaths};\n  })\n}\n\nfunction mergeData (confirmed, recovered, deaths) {\n  return confirmed.map(confirmedRecord => {\n    const recoveredRecord = recovered.find(r => r.key === confirmedRecord.key);\n    const deathsRecord = deaths.find(d => d.key === confirmedRecord.key);\n\n    return {\n      ...confirmedRecord,\n      data: confirmedRecord.data.map(confirmedData => {\n        const confirmed = confirmedData.value;\n        const recoveredData = recoveredRecord && recoveredRecord.data.find(d => d.date === confirmedData.date);\n        const deathsData = deathsRecord && deathsRecord.data.find(d => d.date === confirmedData.date)\n        const recovered = recoveredData && recoveredData.value;\n        const deaths = deathsData && deathsData.value;\n        return {\n          date: confirmedData.date,\n          confirmed,\n          recovered,\n          deaths\n        };\n      })\n    }\n  })\n}\n\nexport function useCombinedHistoricalData() {\n  const httpState = useHttpState();\n\n  useEffect(() => {\n    httpState.setLoading();\n    loadData()\n      .then(({confirmed, recovered, deaths}) => httpState.setData(mergeData(confirmed, recovered, deaths)))\n      .catch(error => httpState.setError(error));\n  }, []);\n\n  return {\n    loading: httpState.loading,\n    error: httpState.error,\n    data: httpState.data\n  };\n\n}\n\nexport function useHistoricalData() {\n  const httpState = useHttpState();\n\n  useEffect(() => {\n    httpState.setLoading();\n    loadHistoricalData()\n      .then(data => httpState.setData(data))\n      .catch(error => httpState.setError(error));\n  }, []);\n\n  return {\n    loading: httpState.loading,\n    error: httpState.error,\n    data: httpState.data\n  };\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst colors = {\n  red: '#D32329',\n  green: '#65D39B',\n  blue: '#449BE2'\n};\n\nexport function Stat ({number, size = 'large', color = 'red', label}) {\n  return (\n    <Container>\n      <Number size={size} color={color}>{number.toLocaleString()}</Number>\n      <Byline size={size}>{label}</Byline>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  text-align: center;\n`;\n\nconst Number = styled.h1`\n  color: ${props => colors[props.color]};\n  font-size: ${props => props.size === 'large' ? '96px' : '64px'};\n  margin-bottom: 0px;\n  text-shadow: 0 1px 12px #222;\n`;\n\nconst Byline = styled.span`\n  color: #E5E5E5;\n  font-size: ${props => props.size === 'large' ? '36px' : '28px'};\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {Stat} from './Stat';\n\nexport function Stats ({data}) {\n  if (!data) return null;\n\n  const total = data.reduce((total, country) => ({\n    confirmed: total.confirmed + country.data.confirmed,\n    recovered: total.recovered + country.data.recovered,\n    deaths: total.deaths + country.data.deaths\n  }), {confirmed: 0, recovered: 0, deaths: 0});\n\n  return (\n    <>\n      <Stat\n        number={Math.max(0, total.confirmed)}\n        label=\"confirmed cases\"\n        color=\"red\"\n      />\n      <Row>\n        <div style={{marginRight: 48}}>\n          <Stat\n            number={Math.max(0, total.recovered)}\n            label=\"recovered\"\n            color=\"green\"\n            size=\"small\"\n          />\n        </div>\n        <Stat\n          number={Math.max(0, total.deaths)}\n          label=\"deaths\"\n          color=\"blue\"\n          size=\"small\"\n        />\n      </Row>\n    </>\n  );\n}\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import bing from '../images/sites/bing.png';\nimport informationisbeautiful from '../images/sites/informationisbeautiful.png';\nimport nCoV2019 from '../images/sites/ncov2019.png';\nimport jhu from '../images/sites/jhu.png';\n\nexport const sites = [\n  {\n    name: 'John Hopkins CSSE',\n    url: 'https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6',\n    image: jhu\n  },\n  // {\n  //   name: 'worldometer',\n  //   url: 'https://www.worldometers.info/coronavirus/'\n  // },\n  {\n    name: 'Bing COVID',\n    url: 'https://bing.com/covid',\n    image: bing\n  },\n  {\n    name: 'COVID-19 Data Pack',\n    url: 'https://informationisbeautiful.net/visualizations/covid-19-coronavirus-infographic-datapack/',\n    image: informationisbeautiful\n  },\n  {\n    name: 'nCoV2019',\n    url: 'https://nCoV2019.live',\n    image: nCoV2019\n  }\n];\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nexport function Site ({name, url, image}) {\n  return (\n    <SiteLink href={url} title={`Covid-19 via ${name}`}>\n      <SiteCard image={image} />\n      <SiteName>{name}</SiteName>\n    </SiteLink>\n  );\n}\n\nconst SiteLink = styled.a`\n  display: block;\n  width: 180px;\n  height: 220px;\n  text-decoration: none;\n`;\n\nconst SiteName = styled.span`\n  color: #898989;\n  font-size: 18px;\n`;\n\nconst SiteCard = styled.div`\n  background-image: url(${props => props.image});\n  background-size: cover;\n  height: 180px;\n  width: 180px;\n  margin-bottom: 8px;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {sites} from '../data/sites';\nimport {Site} from './Site';\n\nexport function Sites () {\n  return (\n    <div>\n      <h3>Explore data in more depth</h3>\n      <Row>\n        {sites.map(site => (\n          <Site\n            key={site.name}\n            name={site.name}\n            url={site.url}\n            image={site.image}\n          />\n        ))}\n      </Row>\n    </div>\n  );\n}\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  min-width: 800px;\n`;\n","import React, {useState, useEffect} from 'react';\nimport {Map, TileLayer, Circle} from 'react-leaflet';\n\nexport function CovidMap ({data}) {\n  // const [index, setIndex] = useState(0);\n  // useEffect(() => {\n  //   if (!data) return;\n\n  //   const interval = setTimeout(() => {\n  //     if (index >= data[1].confirmedCases.length - 2) {\n  //       return;\n  //     }\n\n  //     setIndex(i => i + 1);\n  //   }, 100);\n  //   return () => clearTimeout(interval);\n  // }, [index, data]);\n\n  return (\n    <div style={{width: '100%', height: '100%'}}>\n      <Map center={[30, 0]} zoom={3} zoomControl={false}>\n        <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' url='https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png'/>\n        {data && <Cases data={data} />}\n      </Map>\n    </div>\n  );\n}\n\nconst toRadius = cases => {\n  if (cases < 10) {\n    return 100000;\n  } else if (cases < 30) {\n    return 200000;\n  } else if (cases < 50) {\n    return 300000;\n  } else if (cases < 100) {\n    return 400000;\n  } else if (cases < 300) {\n    return 500000;\n  } else if (cases > 1000) {\n    return 600000;\n  } else {\n    return 900000;\n  }\n}\n\nfunction Cases ({data, index}) {\n  return (\n    <React.Fragment>\n      {data.map(datum => {\n\n        const cases = datum.data.confirmed; //datum.confirmedCases[index];\n        if (!cases) {\n          return null;\n        }\n        if (isNaN(datum.lat) || isNaN(datum.lng) || isNaN(cases) || datum.lng === 113.4244) {\n          // console.log('WTF empty lat or lng', datum)\n          return null;\n        }\n        // console.log('datum', datum)\n        const radius = toRadius(cases);\n\n        const lat = isNaN(datum.lat) ? 0 : datum.lat;\n        const lng = isNaN(datum.lng) ? 0 : datum.lng;\n\n        return (\n          <Circle\n            key={`${datum.country}/${datum.province}/${cases}`}\n            center={[lat, lng]}\n            fillColor=\"red\"\n            color=\"D32329\"\n            fillOpacity={0.2}\n            radius={radius}\n          />\n        )\n      })}\n    </React.Fragment>\n  )\n}\n","export const Colors = {\n  WHITE: '#E5E5E5',\n  RED: '#D32329',\n  GREEN: '#65D39B',\n  BLUE: '#449BE2'\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {Colors} from '../ui';\n\nexport function Marker ({date, dateRange}) {\n  const index = dateRange.indexOf(date);\n\n  return (\n    <Container position={index === 0 ? 0 : index / dateRange.length}>\n      <Label>{date}</Label>\n      {/* <Line /> */}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 60px;\n  height: 72px;\n  left: ${props => (props.position * 100)}%;\n  transition-duration: 300ms;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Label = styled.span`\n  font-size: 18px;\n  color: ${Colors.WHITE};\n`;\n\nconst Line = styled.div`\n  background-color: ${Colors.BLUE};\n  width: 4px;\n  height: 80%;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {useDateRange} from './useDateRange';\nimport {Colors} from '../ui';\nimport {Marker} from './Marker';\n\nexport function DateScrubber ({\n  from,\n  to,\n  date,\n  onDateChanged = () => {}\n}) {\n  const dateRange = useDateRange(from, to);\n\n  return (\n    <Container>\n      {dateRange.map(tickDate => (\n        <Tick\n          key={tickDate}\n          adjacent={(tickDate - 1) === date || (tickDate + 1) === date}\n          current={tickDate === date}\n        />\n      ))}\n      <Marker\n        date={date}\n        dateRange={dateRange}\n      />\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-end;\n  width: 80%;\n  margin: auto;\n`;\n\nconst Tick = styled.div`\n  background-color: ${Colors.WHITE};\n  width: 4px;\n  height: 18px;\n  opacity: 0.6;\n  transition: 120ms;\n  ${props => props.current && `\n    height: 42px;\n    background-color: ${Colors.BLUE}\n  `}\n  ${props => props.adjacent && `\n    height: 28px;\n  `}\n`;\n","import moment from 'moment';\nimport { useState, useEffect } from 'react';\n\nexport function useDateRange (from, to) {\n  const [dateRange, setDateRange] = useState([]);\n\n  useEffect(() => {\n    const range = [];\n    const f = moment(from);\n    const t = moment(to);\n    let cursor = f;\n\n    while (cursor.isSameOrBefore(t)) {\n      range.push(cursor.clone().format('M/D/YY'));\n      cursor.add(1, 'day');\n    }\n\n    setDateRange(range);\n  }, [from, to]);\n\n  return dateRange;\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\nimport {useTotalCases} from './data/useTotalCases';\nimport {useHistoricalData, useCombinedHistoricalData} from './data/useHistoricalData';\nimport {Stats} from './Stats';\nimport {Sites} from './Sites';\nimport {CovidMap} from './Map';\nimport {DateScrubber} from './DateScrubber';\n\nimport bg from './images/background.png';\nimport './App.css';\n\nfunction useDataForDate(countries, date) {\n  countries = countries || [];\n  return countries.map(country => ({\n    ...country,\n    data: country.data.find(d => d.date === date) || country.data[country.data.length - 1]\n  }));\n}\n\nfunction useTickingDate (from, to, tickRate = 100) {\n  const [date, setDate] = useState(from);\n\n  useEffect(() => {\n    const f = moment(from);\n    const t = moment(to);\n    const d = moment(date);\n\n    if (f.isSameOrAfter(t, 'day') || d.clone().isSameOrAfter(t, 'day')) {\n      return;\n    }\n\n    const interval = setTimeout(() => {\n      setDate(d => moment(d).clone().add(1, 'd').format('M/D/YY'));\n    }, tickRate);\n\n    return () => clearTimeout(interval);\n  }, [from, to, date]);\n\n  useEffect(() => {\n    setDate(from);\n  }, [from, to]);\n\n  return date;\n}\n\nfunction App() {\n  const combinedData = useCombinedHistoricalData();\n  const sampleData = combinedData.data ? combinedData.data[0].data : null;\n\n  const toDate = sampleData ? sampleData[sampleData.length - 1].date : moment().subtract(1, 'day').format('M/D/YY');\n  const fromDate = sampleData ? sampleData[0].date : toDate;\n  const date = useTickingDate(\n    fromDate,\n    toDate,\n    120\n  );\n  const dataByDay = useDataForDate(combinedData.data, date);\n\n  return (\n    <Container>\n      <MapContainer>\n        <CovidMap data={dataByDay} />\n      </MapContainer>\n      <Content>\n        <Stats data={dataByDay} />\n\n        <DateScrubberContainer>\n          <DateScrubber\n            from={fromDate}\n            to={toDate}\n            date={date}\n            onDateChanged={() => {}}\n          />\n        </DateScrubberContainer>\n      </Content>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  background-color: #222;\n  height: 100%;\n`;\n\nconst DateScrubberContainer = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst MapContainer = styled.div`\n  position: fixed;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst Content = styled.div`\n  z-index: 2;\n  position: relative;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #E5E5E5;\n`;\n\nconst BG = styled.div`\n  z-index: 1;\n  position: fixed;\n  background-image: url(${bg});\n  background-size: cover;\n  background-position: 50% 50%;\n  opacity: 0.1;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}